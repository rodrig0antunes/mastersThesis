### CORRECTED PERSISTENT MEMORY PROGRAM
``` C
/*
 * rbtree_map_rotate -- (internal) performs a left/right rotation around a node
 */
static void
rbtree_map_rotate(TOID(struct rbtree_map) map,
	TOID(struct tree_map_node) node, enum rb_children c)
{
	// BUG //
	TX_ADD(node);
	// BUG //
	
	TOID(struct tree_map_node) child = D_RO(node)->slots[!c];
	TOID(struct tree_map_node) s = D_RO(map)->sentinel;

	TX_ADD(child);

	PM_EQU(D_RW(node)->slots[!c], D_RO(child)->slots[c]);

	// BUG //
	TX_ADD(child);
	// BUG //

	if (!TOID_EQUALS(D_RO(child)->slots[c], s))
		TX_SET(D_RW(child)->slots[c], parent, node);
	
	PM_EQU(NODE_P(child), NODE_P(node));

	TX_SET(NODE_P(node), slots[NODE_LOCATION(node)], child);

	PM_EQU(D_RW(child)->slots[c], node);
	PM_EQU(D_RW(node)->parent, child);
}
```

### Explanation
In the correction, two lines 'TX_ADD(node);' and 'TX_ADD(child);' are added to register the 'node' and 'child' objects as part of the transaction. 
By adding these lines, the transaction system ensures that any modifications made to these objects during the transaction are properly recorded. 
If the transaction is successful, these changes will be committed, and if the transaction aborts, they will be rolled back, maintaining the consistency of your persistent memory data structures.