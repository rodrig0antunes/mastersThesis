To resolve the bug, we need to set the offset of the `buckets_tmp` object to 0 and persist the change. Additionally, we need to check if the `buckets` and `buckets_tmp` objects are persistent after the changes.

Here is the corrected version of the program:

```C
/*
* hm_atomic_rebuild_finish -- finishes rebuild, assumes buckets_tmp is not null
*/
static void
hm_atomic_rebuild_finish(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap)
{
    TOID(struct buckets) cur = D_RO(hashmap)->buckets;
    TOID(struct buckets) tmp = D_RO(hashmap)->buckets_tmp;

    for (size_t i = 0; i < D_RO(cur)->nbuckets; ++i) {
        while (!POBJ_LIST_EMPTY(&D_RO(cur)->bucket[i])) {
            TOID(struct entry) en =
                POBJ_LIST_FIRST(&D_RO(cur)->bucket[i]);
            uint64_t h = hash(&hashmap, &tmp, D_RO(en)->key);

            if (POBJ_LIST_MOVE_ELEMENT_HEAD(pop,
                &D_RW(cur)->bucket[i],
                &D_RW(tmp)->bucket[h],
                en, list, list)) {
                fprintf(stderr, "move failed: %s\n",
                    pmemobj_errormsg());
                abort();
            }
        }
    }

    POBJ_FREE(&D_RO(hashmap)->buckets);

    PM_EQU(D_RW(hashmap)->buckets, D_RO(hashmap)->buckets_tmp);
    pmemobj_persist(pop, &D_RW(hashmap)->buckets,
        sizeof(D_RW(hashmap)->buckets));

    /* Set offset of buckets_tmp to 0 */
    // BUG //
    D_RW(hashmap)->buckets_tmp.oid.off = 0;
    pmemobj_persist(pop, &D_RW(hashmap)->buckets_tmp,
        sizeof(D_RW(hashmap)->buckets_tmp));

    // BUG //
    PMTest_isPersistent(&D_RW(hashmap)->buckets, sizeof(D_RW(hashmap)->buckets));
    PMTest_isPersistent(&D_RW(hashmap)->buckets_tmp, sizeof(D_RW(hashmap)->buckets_tmp));
}
```

In the corrected version, we set the offset of `buckets_tmp` to 0 using `D_RW(hashmap)->buckets_tmp.oid.off = 0;` and persist the change using `pmemobj_persist(pop, &D_RW(hashmap)->buckets_tmp, sizeof(D_RW(hashmap)->buckets_tmp));`. We also added the necessary code to check if the `buckets` and `buckets_tmp` objects are persistent after the changes.