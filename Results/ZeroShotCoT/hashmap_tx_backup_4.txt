To resolve the bug, we need to ensure that the modifications made to the persistent memory are correctly added to the transaction. 

In the given code, the bug is located in the area delimited by "// BUG //". 

To fix the bug, we need to add the following code inside the "// BUG //" area:

```C
TX_ADD_FIELD(D_RW(buckets)->bucket[h], var);
```

This code will add the modification of the `bucket[h]` field to the transaction.

The corrected code is as follows:

```C
/*
 * hm_tx_remove -- removes specified value from the hashmap,
 * returns:
 * - key's value if successful,
 * - OID_NULL if value didn't exist or if something bad happened
 */
PMEMoid
hm_tx_remove(PMEMobjpool *pop, TOID(struct hashmap_tx) hashmap, uint64_t key)
{
	TOID(struct buckets) buckets = D_RO(hashmap)->buckets;
	TOID(struct entry) var, prev = TOID_NULL(struct entry);

	uint64_t h = hash(&hashmap, &buckets, key);
	for (var = D_RO(buckets)->bucket[h];
			!TOID_IS_NULL(var);
			prev = var, var = D_RO(var)->next) {
		if (D_RO(var)->key == key)
			break;
	}

	if (TOID_IS_NULL(var))
		return OID_NULL;

	TX_BEGIN(pop) {
		if (TOID_IS_NULL(prev))
			TX_ADD_FIELD(D_RO(hashmap)->buckets, bucket[h]);
		else
			TX_ADD_FIELD(prev, next);

		TX_ADD_FIELD(D_RW(buckets)->bucket[h], var);

		if (TOID_IS_NULL(prev))
			PM_EQU(D_RW(buckets)->bucket[h], D_RO(var)->next);
		else
			PM_EQU(D_RW(prev)->next, D_RO(var)->next);
		PM_EQU(D_RW(hashmap)->count, D_RO(hashmap)->count - 1);
		TX_FREE(var);
	} TX_ONABORT {
		fprintf(stderr, "transaction aborted: %s\n",
			pmemobj_errormsg());
		return OID_NULL;
	} TX_END

	if (D_RO(hashmap)->count < D_RO(buckets)->nbuckets)
		hm_tx_rebuild(pop, hashmap, D_RO(buckets)->nbuckets / 2);

	return D_RO(var)->value;
}
```

Now the bug has been fixed and the modifications to the persistent memory will be correctly added to the transaction.