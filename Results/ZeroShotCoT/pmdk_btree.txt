To resolve the bug, we need to identify the issue and provide a fix. Let's analyze the code and identify the problem.

The first bug is located at the line:
```C
TOID(struct tree_map_node) right = TX_ZNEW(struct tree_map_node);
```
The issue here is that the `TX_ZNEW` macro is used, which is incorrect. Instead, we should use the `TX_NEW` macro to allocate memory for the new node. 

The second bug is located at the line:
```C
PM_EQU(D_RW(node)->items[c - 1], EMPTY_ITEM);
```
The issue here is that the `PM_EQU` macro is used, which is incorrect. Instead, we should use the `D_RW` macro to access the writable version of the persistent memory object and assign the `EMPTY_ITEM` value to it.

Now, let's provide the corrected version of the code:

```C
/*
 * btree_map_create_split_node -- (internal) splits a node into two
 */
static TOID(struct tree_map_node)
btree_map_create_split_node(TOID(struct tree_map_node) node,
	struct tree_map_node_item *m)
{

	// BUG //
	TOID(struct tree_map_node) right = TX_NEW(struct tree_map_node, struct tree_map_node);
	
	int c = (BTREE_ORDER / 2);
	*m = D_RO(node)->items[c - 1]; /* select median item */
		
	// BUG //
	D_RW(node)->items[c - 1] = EMPTY_ITEM;

	/* move everything right side of median to the new node */
	for (int i = c; i < BTREE_ORDER; ++i) {
		if (i != BTREE_ORDER - 1) {
			D_RW(right)->items[D_RW(right)->n] = D_RO(node)->items[i];
			D_RW(right)->n = D_RO(right)->n + 1;
			D_RW(node)->items[i] = EMPTY_ITEM;
		}
		D_RW(right)->slots[i - c] = D_RO(node)->slots[i];
		D_RW(node)->slots[i] = TOID_NULL(struct tree_map_node);
	}
	D_RW(node)->n = c - 1;

	return right;
}
```

Please note that the corrected code assumes that the `EMPTY_ITEM` is a valid value for the `struct tree_map_node_item` type. If `EMPTY_ITEM` is not defined or not appropriate for the type, you may need to adjust the code accordingly.