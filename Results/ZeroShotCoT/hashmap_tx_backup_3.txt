To resolve the bug, we need to add the necessary transactional operations using the libpmemobj library. Based on the provided code, the bug seems to be related to the missing transactional operations for the hashmap and bucket fields.

Here is the corrected version of the program:

```C
/*
* hm_tx_insert -- inserts specified value into the hashmap,
* returns:
* - 0 if successful,
* - 1 if value already existed,
* - -1 if something bad happened
*/
int
hm_tx_insert(PMEMobjpool *pop, TOID(struct hashmap_tx) hashmap,
             uint64_t key, PMEMoid value)
{
    TOID(struct buckets) buckets = D_RO(hashmap)->buckets;
    TOID(struct entry) var;

    uint64_t h = hash(&hashmap, &buckets, key);
    int num = 0;

    for (var = D_RO(buckets)->bucket[h];
         !TOID_IS_NULL(var);
         var = D_RO(var)->next) {
        if (D_RO(var)->key == key)
            return 1;
        num++;
    }
    // BUG //

    int ret = 0;
    TX_BEGIN(pop) {
        TX_ADD_FIELD(D_RW(buckets)->bucket[h], next);
        TX_ADD_FIELD(D_RW(hashmap)->count);
        TX_ADD_FIELD(D_RW(buckets)->bucket[h], key);
        TX_ADD_FIELD(D_RW(buckets)->bucket[h], value);

        TOID(struct entry) e = TX_NEW(struct entry);
        D_RW(e)->key = key;
        D_RW(e)->value = value;
        D_RW(e)->next = D_RO(buckets)->bucket[h];
        D_RW(buckets)->bucket[h] = e;
        D_RW(hashmap)->count++;
        num++;
    } TX_ONABORT {
        fprintf(stderr, "transaction aborted: %s\n",
                pmemobj_errormsg());
        ret = -1;
    } TX_END

    if (ret)
        return ret;

    if (num > MAX_HASHSET_THRESHOLD ||
        (num > MIN_HASHSET_THRESHOLD &&
         D_RO(hashmap)->count > 2 * D_RO(buckets)->nbuckets))
        hm_tx_rebuild(pop, hashmap, D_RO(buckets)->nbuckets * 2);

    return 0;
}
```

In the corrected code, we have added the necessary transactional operations using the `TX_ADD_FIELD` macro for the `buckets`, `count`, `key`, and `value` fields. We have also assigned the `key`, `value`, and `next` fields of the new entry `e` using the `D_RW` macro.

Please note that the `PMTest_assign` and `PM_EQU` macros were not recognized, so they have been removed from the code. If these macros are necessary for your specific use case, please provide their definitions, and we can incorporate them into the corrected code.