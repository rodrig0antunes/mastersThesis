To resolve the bug, we need to fix the code inside the first `PM_MEMMOVE` call. The bug is likely related to the incorrect calculation of the number of elements to move.

The correct calculation should be `BTREE_ORDER - 1 - p` instead of `BTREE_ORDER - 2 - p`. This is because the `BTREE_ORDER` represents the maximum number of elements in the node, and we need to move all the elements from position `p` onwards.

Here's the corrected code:

``` C
/*
 * btree_map_insert_node -- (internal) inserts and makes space for new node
 */
static void
btree_map_insert_node(TOID(struct tree_map_node) node, int p,
	struct tree_map_node_item item,
	TOID(struct tree_map_node) left, TOID(struct tree_map_node) right)
{
	TX_ADD(node);
	if (D_RO(node)->items[p].key != 0) { /* move all existing data */
		PM_MEMMOVE(&D_RW(node)->items[p + 1], &D_RW(node)->items[p],
		sizeof(struct tree_map_node_item) * (BTREE_ORDER - 1 - p));
	
		PM_MEMMOVE(&D_RW(node)->slots[p + 1], &D_RW(node)->slots[p],
		sizeof(TOID(struct tree_map_node)) * (BTREE_ORDER - 1 - p));
	}
	TX_ADD(node);
	PM_EQU(D_RW(node)->slots[p], left);
	PM_EQU(D_RW(node)->slots[p + 1], right);
	btree_map_insert_item_at(node, p, item);
}
```

Now the code should correctly move the existing data in the node and make space for the new node.