To resolve the bug, we need to ensure that the modifications made to the `hashmap` structure are persisted correctly. Currently, the program is persisting the `count_dirty` field twice, which is unnecessary. Additionally, the program is missing a call to persist the `buckets` structure after the new entry is inserted.

To fix these issues, we can make the following changes:

1. Remove the duplicate `pmemobj_persist` call for `count_dirty`:
``` C
// Remove this line
pmemobj_persist(pop, &D_RW(hashmap)->count_dirty, sizeof(D_RW(hashmap)->count_dirty));
```

2. Add a `pmemobj_persist` call for the `buckets` structure after the new entry is inserted:
``` C
// Add this line after the entry is inserted
pmemobj_persist(pop, &D_RW(buckets), sizeof(D_RW(buckets)));
```

Now, let's put the corrected program within code delimiters:

``` C
/* 
* hm_atomic_insert -- inserts specified value into the hashmap,
* returns:
* - 0 if successful,
* - 1 if value already existed,
* - -1 if something bad happened
*/
int
hm_atomic_insert(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap,
                 uint64_t key, PMEMoid value)
{
    TOID(struct buckets) buckets = D_RO(hashmap)->buckets;
    TOID(struct entry) var;

    uint64_t h = hash(&hashmap, &buckets, key);
    int num = 0;

    POBJ_LIST_FOREACH(var, &D_RO(buckets)->bucket[h], list) {
        if (D_RO(var)->key == key)
            return 1;
        num++;
    }

    // BUG //

    struct entry_args args = {
        .key = key,
        .value = value,
    };
    PMEMoid oid = POBJ_LIST_INSERT_NEW_HEAD(pop,
                                            &D_RW(buckets)->bucket[h],
                                            list, sizeof(struct entry),
                                            create_entry, &args);
    if (OID_IS_NULL(oid)) {
        fprintf(stderr, "failed to allocate entry: %s\n",
                pmemobj_errormsg());
        return -1;
    }

    PM_EQU(D_RW(hashmap)->count, (D_RW(hashmap)->count + 1));
    pmemobj_persist(pop, &D_RW(hashmap)->count, sizeof(D_RW(hashmap)->count));

    PMTest_isPersistedBefore(&D_RW(hashmap)->count_dirty, sizeof(D_RW(hashmap)->count_dirty), &D_RW(hashmap)->count, sizeof(D_RW(hashmap)->count));

    PM_EQU(D_RW(hashmap)->count_dirty, 0);
    pmemobj_persist(pop, &D_RW(hashmap)->count_dirty, sizeof(D_RW(hashmap)->count_dirty));

    PMTest_isPersistedBefore(&D_RW(hashmap)->count, sizeof(D_RW(hashmap)->count), &D_RW(hashmap)->count_dirty, sizeof(D_RW(hashmap)->count_dirty));

    num++;
    if (num > MAX_HASHSET_THRESHOLD ||
        (num > MIN_HASHSET_THRESHOLD &&
         D_RO(hashmap)->count > 2 * D_RO(buckets)->nbuckets))
        hm_atomic_rebuild(pop, hashmap, D_RW(buckets)->nbuckets * 2);

    PMTest_isPersistent(&D_RW(hashmap)->count_dirty, sizeof(D_RW(hashmap)->count_dirty));
    PMTest_isPersistent(&D_RW(hashmap)->count, sizeof(D_RW(hashmap)->count));

    return 0;
}
```