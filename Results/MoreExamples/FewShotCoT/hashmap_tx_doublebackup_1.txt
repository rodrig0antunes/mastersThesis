### Corrected Persistent Memory Program
``` C
/*
 * hm_tx_insert -- inserts specified value into the hashmap,
 * returns:
 * - 0 if successful,
 * - 1 if value already existed,
 * - -1 if something bad happened
 */
int
hm_tx_insert(PMEMobjpool *pop, TOID(struct hashmap_tx) hashmap,
	uint64_t key, PMEMoid value)
{
	TOID(struct buckets) buckets = D_RO(hashmap)->buckets;
	TOID(struct entry) var;

	uint64_t h = hash(&hashmap, &buckets, key);
	int num = 0;

	for (var = D_RO(buckets)->bucket[h];
			!TOID_IS_NULL(var);
			var = D_RO(var)->next) {
		if (D_RO(var)->key == key)
			return 1;
		num++;
	}

	int ret = 0;
	TX_BEGIN(pop) {

		// BUG //
		TX_ADD_FIELD(D_RW(buckets)->bucket[h], next);
		TX_ADD_FIELD(hashmap, count);
		
		TOID(struct entry) e = TX_NEW(struct entry);
		
		// BUG //
		PM_EQU((D_RW(e)->key), (key));
		PM_EQU((D_RW(e)->value), (value));
		PM_EQU((D_RW(e)->next), (D_RO(buckets)->bucket[h]));
		
		PM_EQU((D_RW(buckets)->bucket[h]), (e));
		PM_EQU((D_RW(hashmap)->count), (D_RO(hashmap)->count+1));
		num++;
	} TX_ONABORT {
		fprintf(stderr, "transaction aborted: %s\n",
			pmemobj_errormsg());
		ret = -1;
	} TX_END

	if (ret)
		return ret;

	if (num > MAX_HASHSET_THRESHOLD ||
			(num > MIN_HASHSET_THRESHOLD &&
			D_RO(hashmap)->count > 2 * D_RO(buckets)->nbuckets))
		hm_tx_rebuild(pop, hashmap, D_RO(buckets)->nbuckets * 2);

	return 0;
}
```

### Explanation
In the corrected program, the two bugs have been fixed. 

1. The first bug is related to the `TX_ADD_FIELD` macro. The correct usage is to specify the field within the structure that needs to be added to the transaction. In this case, the correct usage is `TX_ADD_FIELD(D_RW(buckets)->bucket[h], next);` to add the `next` field of the `bucket[h]` entry to the transaction.

2. The second bug is related to the assignment of values to the newly created entry `e`. The correct usage is `PM_EQU((D_RW(e)->key), (key));` to assign the `key` value to the `key` field of `e`. Similarly, `PM_EQU((D_RW(e)->value), (value));` assigns the `value` to the `value` field of `e`. Finally, `PM_EQU((D_RW(e)->next), (D_RO(buckets)->bucket[h]));` assigns the value of `bucket[h]` to the `next` field of `e`.

These corrections ensure that the correct fields are added to the transaction and the values are assigned correctly to the new entry `e`.