### CORRECTED PERSISTENT MEMORY PROGRAM

''' C
/*
 * btree_map_rotate_right -- (internal) takes one element from right sibling
 */
static void
btree_map_rotate_right(TOID(struct tree_map_node) rsb,
	TOID(struct tree_map_node) node,
	TOID(struct tree_map_node) parent, int p)
{
	/* move the separator from parent to the deficient node */
	struct tree_map_node_item sep = D_RO(parent)->items[p];
	btree_map_insert_item(node, D_RO(node)->n, sep);

	/* the first element of the right sibling is the new separator */
	TX_ADD_FIELD(parent, items[p]);
	PM_EQU(D_RW(parent)->items[p], D_RO(rsb)->items[0]);

	/* the nodes are not necessarily leafs, so copy also the slot */
		
		// BUG //

	TX_ADD_FIELD(node, slots[D_RO(node)->n]);
	PM_EQU(D_RW(node)->slots[D_RO(node)->n], D_RO(rsb)->slots[0]);

	TX_ADD_FIELD(rsb, n);
	PM_EQU(D_RW(rsb)->n, D_RO(rsb)->n - 1); /* it loses one element, but still > min */
		
		// BUG //
		
	/* move all existing elements back by one array slot */
	PM_MEMMOVE(D_RW(rsb)->items, D_RO(rsb)->items + 1,
		sizeof(struct tree_map_node_item) * (D_RO(rsb)->n));
	PM_MEMMOVE(D_RW(rsb)->slots, D_RO(rsb)->slots + 1,
		sizeof(TOID(struct tree_map_node)) * (D_RO(rsb)->n + 1));
}
'''.