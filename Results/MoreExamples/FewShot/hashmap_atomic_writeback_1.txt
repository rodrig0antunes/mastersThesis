### CORRECTED PERSISTENT MEMORY PROGRAM

''' C
/*
 * hm_atomic_rebuild_finish -- finishes rebuild, assumes buckets_tmp is not null
 */
static void
hm_atomic_rebuild_finish(PMEMobjpool *pop, TOID(struct hashmap_atomic) hashmap)
{
	TOID(struct buckets) cur = D_RO(hashmap)->buckets;
	TOID(struct buckets) tmp = D_RO(hashmap)->buckets_tmp;

	for (size_t i = 0; i < D_RO(cur)->nbuckets; ++i) {
		while (!POBJ_LIST_EMPTY(&D_RO(cur)->bucket[i])) {
			TOID(struct entry) en =
					POBJ_LIST_FIRST(&D_RO(cur)->bucket[i]);
			uint64_t h = hash(&hashmap, &tmp, D_RO(en)->key);

			if (POBJ_LIST_MOVE_ELEMENT_HEAD(pop,
					&D_RW(cur)->bucket[i],
					&D_RW(tmp)->bucket[h],
					en, list, list)) {
				fprintf(stderr, "move failed: %s\n",
						pmemobj_errormsg());
				abort();
			}
		}
	}
		
		// BUG //
	
	POBJ_FREE(&D_RW(hashmap)->buckets);
	
	PM_EQU(D_RW(hashmap)->buckets, D_RO(hashmap)->buckets_tmp);
	
		// BUG //
	
	PM_EQU(D_RW(hashmap)->buckets_tmp.oid.off, 0);
	pmemobj_persist(pop, &D_RW(hashmap)->buckets_tmp,
			sizeof(D_RW(hashmap)->buckets_tmp));
	
	PMTest_isPersistent(&D_RW(hashmap)->buckets, sizeof(D_RW(hashmap)->buckets));
	PMTest_isPersistent(&D_RW(hashmap)->buckets_tmp, sizeof(D_RW(hashmap)->buckets_tmp));
}
'''.